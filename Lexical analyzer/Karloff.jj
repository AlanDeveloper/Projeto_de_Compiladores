PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <VOID: "void">
| <MAIN: "main">
| <RETURN: "return">
| <FUNC: "func">
| <TRUE: "true">
| <FALSE: "false">
| <UNTIL: "until">
| <NEWVAR: "newVar">
| <THEN: "then">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <REPEAT: "repeat">
| <INT: "int">
| <PONTOVIRGULA: ";">
| <VIRGULA: ",">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <ASPASDUPLAS: "\"">
| <OUTPUT: "System.output">

}

/*
 * Operators
 */
<DEFAULT> TOKEN :
{
  <ASSIGN: "=">
| <LT: "<">
| <RT: ">">
| <EQ: "==">
| <PLUS: "+">
| <MINUS: "-">
| <STAR: "*">
| <SLASH: "/">
| <BIT_AND: "&">
| <BIT_OR: "|">
}

TOKEN :
{
  <NUM : (["0"-"9"])+>
| <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>

}



void Karloff () :
{Token t;}
{

(
  <VOID> { System.out.println("Palavra reservada: void");}
| <MAIN> { System.out.println("Palavra reservada: main");}
| <RETURN> { System.out.println("Palavra reservada: return");}
| <FUNC> { System.out.println("Palavra reservada: func");}
| <TRUE> { System.out.println("Palavra reservada: true");}
| <FALSE> { System.out.println("Palavra reservada: false");}
| <UNTIL> { System.out.println("Palavra reservada: until");}
| <OUTPUT> { System.out.println("Palavra reservada: System.output");}
| <NEWVAR> { System.out.println("Palavra reservada: newVar");}
| <THEN> { System.out.println("Palavra reservada: then");}
| <IF> { System.out.println("Palavra reservada: if");}
| <ELSE> { System.out.println("Palavra reservada: else");}
| <WHILE> { System.out.println("Palavra reservada: while");}
| <REPEAT> { System.out.println("Palavra reservada: repeat");}
| <PONTOVIRGULA> { System.out.println("Ponto e virgula: ;");}
| <VIRGULA> { System.out.println("Virgula: ,");}
| <INT> { System.out.println("Palavra reservada: int");}
| <ACHAVES> { System.out.println("Abre chaves: {");}
| <FCHAVES> { System.out.println("Fecha chaves: }");}
| <APARENTESES> { System.out.println("Abre parenteses: (");}
| <FPARENTESES> { System.out.println("Fecha parenteses: )");}
| <ASPASDUPLAS> { System.out.println("Aspas duplas: \"");}
| t=<NUM> { System.out.println("NÃºmero: "+ t.image);}
| t=<ID> { System.out.println("Identificador: "+ t.image);}
| <ASSIGN> { System.out.println("Operador: =");}
| <LT> { System.out.println("Operador: <");}
| <RT> { System.out.println("Operador: >");}
| <EQ> { System.out.println("Operador: ==");}
| <PLUS> { System.out.println("Operador: +");}
| <MINUS> { System.out.println("Operador: -");}
| <STAR> { System.out.println("Operador: *");}
| <SLASH> { System.out.println("Operador: /");}
| <BIT_AND> { System.out.println("Operador: &");}
| <BIT_OR> { System.out.println("Operador: |");}
)*
<EOF> 


}





